name: Deploy Backend (rsync + systemd)

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

env:
  SSH_HOST: ${{ vars.SSH_HOST }}
  SSH_PORT: ${{ vars.SSH_PORT }}
  SSH_USER: ${{ vars.SSH_USER }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}
  RSYNC_SRC: ${{ vars.RSYNC_SRC }}
  RSYNC_DEST: ${{ vars.RSYNC_DEST }}
  HEALTH_URL: ${{ vars.HEALTH_URL }} # e.g. https://predictpix.com/api/health

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust server host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -T 10 -p "${SSH_PORT:-22}" "${SSH_HOST}" >> ~/.ssh/known_hosts

      - name: Ensure destination directory exists
        run: |
          ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" "mkdir -p '${RSYNC_DEST%/}'"

      - name: Rsync backend to server
        run: |
          rsync -az --delete --omit-dir-times --no-perms --no-owner --no-group \
            --exclude=".git/" --exclude=".github/" --exclude="__pycache__/" \
            -e "ssh -p ${SSH_PORT:-22}" \
            "${RSYNC_SRC%/}/" "${SSH_USER}@${SSH_HOST}:${RSYNC_DEST%/}/"

      - name: Mark deploy time
        run: |
          date -u +%FT%TZ | ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" "cat > '${RSYNC_DEST%/}/.deployed-at'"

      - name: Write commit SHA marker
        run: |
          echo "${GITHUB_SHA}" | ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" "cat > '${RSYNC_DEST%/}/.deployed-sha'"

      - name: Restart service
        run: |
          ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" \
            "sudo /usr/bin/systemctl restart '${SERVICE_NAME}' && sudo /usr/bin/systemctl is-active '${SERVICE_NAME}'"

      - name: Health check (public, retry with pipefail)
        shell: bash
        run: |
          set -Eeuo pipefail
          url="${HEALTH_URL:-https://predictpix.com/api/health}"
          echo "Polling $url until HTTP 200…"
          for i in {1..24}; do
            code=$(curl -fsS -o /dev/null -w '%{http_code}' "$url" || true)
            if [ "$code" = "200" ]; then
              curl -fsS "$url" | head -c 200
              exit 0
            fi
            echo "Health not ready (HTTP $code). Retry $i/24…"
            sleep 5
          done
          echo "Health check failed after retries."
          exit 1


