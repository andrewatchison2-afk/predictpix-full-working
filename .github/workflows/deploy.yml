name: Deploy Backend (rsync + systemd)

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

env:
  SSH_HOST: ${{ vars.SSH_HOST }}
  SSH_PORT: ${{ vars.SSH_PORT }}
  SSH_USER: ${{ vars.SSH_USER }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}
  RSYNC_SRC: ${{ vars.RSYNC_SRC }}
  RSYNC_DEST: ${{ vars.RSYNC_DEST }}
  HEALTH_URL: ${{ vars.HEALTH_URL }} # e.g. https://predictpix.com/api/health

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust server host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -T 10 -p "${SSH_PORT:-22}" "${SSH_HOST}" >> ~/.ssh/known_hosts

      - name: Ensure destination directory exists
        run: |
          ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" "mkdir -p '${RSYNC_DEST%/}'"

      - name: Rsync backend to server
        run: |
          rsync -az --delete --omit-dir-times --no-perms --no-owner --no-group \
            --exclude=".git/" --exclude=".github/" --exclude="__pycache__/" \
            -e "ssh -p ${SSH_PORT:-22}" \
            "${RSYNC_SRC%/}/" "${SSH_USER}@${SSH_HOST}:${RSYNC_DEST%/}/"

      - name: Mark deploy time
        run: |
          date -u +%FT%TZ | ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" "cat > '${RSYNC_DEST%/}/.deployed-at'"

      - name: Write commit SHA marker
        run: |
          echo "${GITHUB_SHA}" | ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" "cat > '${RSYNC_DEST%/}/.deployed-sha'"

      - name: Restart service
        run: |
          ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" \
            "sudo /usr/bin/systemctl restart '${SERVICE_NAME}' && sudo /usr/bin/systemctl is-active '${SERVICE_NAME}'"

      - name: Health check (public, retry with pipefail)
        shell: bash
        run: |
          set -Eeuo pipefail
          url="${HEALTH_URL:-https://predictpix.com/api/health}"
          echo "Polling $url until HTTP 200…"
          for i in {1..24}; do
            code=$(curl -fsS -o /dev/null -w '%{http_code}' "$url" || true)
            if [ "$code" = "200" ]; then
              curl -fsS "$url" | head -c 200
              exit 0
            fi
            echo "Health not ready (HTTP $code). Retry $i/24…"
            sleep 5
          done
          echo "Health check failed after retries."
          exit 1

      - name: Install jq (for JSON parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compute endpoints from HEALTH_URL
        id: endpoints
        shell: bash
        run: |
          set -Eeuo pipefail
          base="${HEALTH_URL%/api/health}"
          login_url="${base}/api/auth/login"
          markets_url="${base}/api/markets?limit=1"
          echo "login_url=${login_url}"     >> "$GITHUB_OUTPUT"
          echo "markets_url=${markets_url}" >> "$GITHUB_OUTPUT"
          echo "Using base: ${base}"
          echo "Login URL: ${login_url}"
          echo "Markets URL: ${markets_url}"

      # ---- New: debug the key without printing it ----
      - name: Debug: show key length & hash (redacted)
        shell: bash
        env:
          RAW_KEY_SECRET: ${{ secrets.CI_API_KEY }}
          RAW_KEY_VAR: ${{ vars.CI_API_KEY }}
        run: |
          set -Eeuo pipefail
          raw="${RAW_KEY_SECRET:-}"
          if [ -z "$raw" ]; then raw="${RAW_KEY_VAR:-}"; fi
          if [ -z "$raw" ]; then
            echo "CI_API_KEY not set (neither repository secret nor variable)."; exit 1
          fi
          key=$(printf "%s" "$raw" | tr -d '\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          echo -n "$key" | wc -c | awk '{print "Key length:", $1}'
          echo -n "$key" | sha256sum | awk '{print "Key sha256:", $1}'

      # ---- New: robust login (JSON → header → form) with fallback for secret/var ----
      - name: Login (API key mode)
        id: login
        shell: bash
        env:
          LOGIN_URL: ${{ steps.endpoints.outputs.login_url }}
          RAW_KEY_SECRET: ${{ secrets.CI_API_KEY }}
          RAW_KEY_VAR: ${{ vars.CI_API_KEY }}
        run: |
          set -Eeuo pipefail
          raw="${RAW_KEY_SECRET:-}"
          if [ -z "$raw" ]; then raw="${RAW_KEY_VAR:-}"; fi
          if [ -z "$raw" ]; then echo "CI_API_KEY not set"; exit 1; fi
          key=$(printf "%s" "$raw" | tr -d '\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

          attempt() {
            name="$1"; shift
            echo "Trying $name login…"
            status=$(curl -sS -o login.json -w "%{http_code}" "$@")
            echo "Login HTTP status ($name): $status"
            if [ "$status" = "200" ]; then
              return 0
            else
              echo "Response body ($name):"; cat login.json || true
              return 1
            fi
          }

          # A) JSON body
          if attempt "JSON" -X POST "$LOGIN_URL" -H "Content-Type: application/json" \
               -d "{\"api_key\":\"${key}\"}"; then
            :
          # B) X-API-Key header
          elif attempt "HEADER" -X POST "$LOGIN_URL" -H "X-API-Key: ${key}" -H "Content-Length: 0"; then
            :
          # C) form-encoded
          elif attempt "FORM" -X POST "$LOGIN_URL" -H "Content-Type: application/x-www-form-urlencoded" \
               --data-urlencode "api_key=${key}"; then
            :
          else
            echo "All login attempts failed"; exit 1
          fi

          token=$(jq -r '.access_token // .token // .jwt // empty' login.json)
          if [ -z "$token" ] || [ "$token" = "null" ]; then
            echo "No token in successful login response"; cat login.json; exit 1
          fi
          echo "token=$token" >> "$GITHUB_OUTPUT"

      - name: Markets sanity (authorized)
        shell: bash
        env:
          MARKETS_URL: ${{ steps.endpoints.outputs.markets_url }}
          TOKEN: ${{ steps.login.outputs.token }}
        run: |
          set -Eeuo pipefail
          curl -fsS "${MARKETS_URL}" -H "Authorization: Bearer ${TOKEN}" | head -c 200

