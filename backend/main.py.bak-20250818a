from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import os, psycopg

app = FastAPI()

# ---- CORS (driven by FRONTEND_ORIGIN) ----
# FRONTEND_ORIGIN can be a single origin, a comma-separated list, or "*" to allow all.
# Example: FRONTEND_ORIGIN=https://predictpix.com,https://app.predictpix.com
origins_env = os.getenv("FRONTEND_ORIGIN", "*").strip()
if origins_env == "*" or origins_env == "":
    allowed_origins = ["*"]
else:
    allowed_origins = [o.strip() for o in origins_env.split(",") if o.strip()]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=False,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---- Existing endpoints (kept) ----
@app.get("/health")
def health():
    return {"ok": True}

@app.get("/db/ready")
def db_ready():
    url = os.getenv("DATABASE_URL")
    if not url:
        return {"db": "err", "error": "DATABASE_URL missing"}
    try:
        with psycopg.connect(url, connect_timeout=5) as conn:
            with conn.cursor() as cur:
                cur.execute("select 1")
                cur.fetchone()
        return {"db": "ok"}
    except Exception as e:
        return {"db": "err", "error": str(e)[:200]}

# ---- API-prefixed aliases (no behavior change) ----
@app.get("/api/health")
def api_health():
    return health()

@app.get("/api/db/ready")
def api_db_ready():
    return db_ready()
